package ru.kotikov.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.kotikov.model.Farmer;
import ru.kotikov.model.FarmerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Farmer service. Represents a row in the &quot;entity_Farmer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.kotikov.model.FarmerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerImpl}.
 * </p>
 *
 * @author Kirill_Kotikov
 * @see FarmerImpl
 * @see ru.kotikov.model.Farmer
 * @see ru.kotikov.model.FarmerModel
 * @generated
 */
public class FarmerModelImpl extends BaseModelImpl<Farmer>
    implements FarmerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a farmer model instance should use the {@link ru.kotikov.model.Farmer} interface instead.
     */
    public static final String TABLE_NAME = "entity_Farmer";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "farmer_id", Types.BIGINT },
            { "farmer_name", Types.VARCHAR },
            { "farmer_legal_form", Types.VARCHAR },
            { "farmer_inn", Types.BIGINT },
            { "farmer_kpp", Types.BIGINT },
            { "farmer_ogrn", Types.BIGINT },
            { "farmer_registration_region_id", Types.BIGINT },
            { "farmer_registration_date", Types.TIMESTAMP },
            { "farmer_archive_status", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table entity_Farmer (uuid_ VARCHAR(75) null,farmer_id LONG not null primary key,farmer_name VARCHAR(75) null,farmer_legal_form VARCHAR(75) null,farmer_inn LONG,farmer_kpp LONG,farmer_ogrn LONG,farmer_registration_region_id LONG,farmer_registration_date DATE null,farmer_archive_status BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table entity_Farmer";
    public static final String ORDER_BY_JPQL = " ORDER BY farmer.farmerName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY entity_Farmer.farmer_name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.kotikov.model.Farmer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.kotikov.model.Farmer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.kotikov.model.Farmer"),
            true);
    public static long FARMERARCHIVESTATUS_COLUMN_BITMASK = 1L;
    public static long FARMERNAME_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static final String MAPPING_TABLE_ENTITY_REGIONS_FARMERS_NAME = "entity_regions_farmers";
    public static final Object[][] MAPPING_TABLE_ENTITY_REGIONS_FARMERS_COLUMNS = {
            { "farmer_id", Types.BIGINT },
            { "region_id", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_ENTITY_REGIONS_FARMERS_SQL_CREATE = "create table entity_regions_farmers (farmer_id LONG not null,region_id LONG not null,primary key (farmer_id, region_id))";
    public static final boolean FINDER_CACHE_ENABLED_ENTITY_REGIONS_FARMERS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.entity_regions_farmers"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.kotikov.model.Farmer"));
    private static ClassLoader _classLoader = Farmer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Farmer.class };
    private String _uuid;
    private String _originalUuid;
    private long _farmerId;
    private String _farmerName;
    private String _originalFarmerName;
    private String _farmerLegalForm;
    private long _farmerInn;
    private long _farmerKpp;
    private long _farmerOgrn;
    private Long _farmerRegistrationRegionId;
    private Date _farmerRegistrationDate;
    private boolean _farmerArchiveStatus;
    private boolean _originalFarmerArchiveStatus;
    private boolean _setOriginalFarmerArchiveStatus;
    private long _columnBitmask;
    private Farmer _escapedModel;

    public FarmerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFarmerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Farmer.class;
    }

    @Override
    public String getModelClassName() {
        return Farmer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("farmerId", getFarmerId());
        attributes.put("farmerName", getFarmerName());
        attributes.put("farmerLegalForm", getFarmerLegalForm());
        attributes.put("farmerInn", getFarmerInn());
        attributes.put("farmerKpp", getFarmerKpp());
        attributes.put("farmerOgrn", getFarmerOgrn());
        attributes.put("farmerRegistrationRegionId",
            getFarmerRegistrationRegionId());
        attributes.put("farmerRegistrationDate", getFarmerRegistrationDate());
        attributes.put("farmerArchiveStatus", getFarmerArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long farmerId = (Long) attributes.get("farmerId");

        if (farmerId != null) {
            setFarmerId(farmerId);
        }

        String farmerName = (String) attributes.get("farmerName");

        if (farmerName != null) {
            setFarmerName(farmerName);
        }

        String farmerLegalForm = (String) attributes.get("farmerLegalForm");

        if (farmerLegalForm != null) {
            setFarmerLegalForm(farmerLegalForm);
        }

        Long farmerInn = (Long) attributes.get("farmerInn");

        if (farmerInn != null) {
            setFarmerInn(farmerInn);
        }

        Long farmerKpp = (Long) attributes.get("farmerKpp");

        if (farmerKpp != null) {
            setFarmerKpp(farmerKpp);
        }

        Long farmerOgrn = (Long) attributes.get("farmerOgrn");

        if (farmerOgrn != null) {
            setFarmerOgrn(farmerOgrn);
        }

        Long farmerRegistrationRegionId = (Long) attributes.get(
                "farmerRegistrationRegionId");

        if (farmerRegistrationRegionId != null) {
            setFarmerRegistrationRegionId(farmerRegistrationRegionId);
        }

        Date farmerRegistrationDate = (Date) attributes.get(
                "farmerRegistrationDate");

        if (farmerRegistrationDate != null) {
            setFarmerRegistrationDate(farmerRegistrationDate);
        }

        Boolean farmerArchiveStatus = (Boolean) attributes.get(
                "farmerArchiveStatus");

        if (farmerArchiveStatus != null) {
            setFarmerArchiveStatus(farmerArchiveStatus);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getFarmerId() {
        return _farmerId;
    }

    @Override
    public void setFarmerId(long farmerId) {
        _farmerId = farmerId;
    }

    @Override
    public String getFarmerName() {
        if (_farmerName == null) {
            return StringPool.BLANK;
        } else {
            return _farmerName;
        }
    }

    @Override
    public void setFarmerName(String farmerName) {
        _columnBitmask = -1L;

        if (_originalFarmerName == null) {
            _originalFarmerName = _farmerName;
        }

        _farmerName = farmerName;
    }

    public String getOriginalFarmerName() {
        return GetterUtil.getString(_originalFarmerName);
    }

    @Override
    public String getFarmerLegalForm() {
        if (_farmerLegalForm == null) {
            return StringPool.BLANK;
        } else {
            return _farmerLegalForm;
        }
    }

    @Override
    public void setFarmerLegalForm(String farmerLegalForm) {
        _farmerLegalForm = farmerLegalForm;
    }

    @Override
    public long getFarmerInn() {
        return _farmerInn;
    }

    @Override
    public void setFarmerInn(long farmerInn) {
        _farmerInn = farmerInn;
    }

    @Override
    public long getFarmerKpp() {
        return _farmerKpp;
    }

    @Override
    public void setFarmerKpp(long farmerKpp) {
        _farmerKpp = farmerKpp;
    }

    @Override
    public long getFarmerOgrn() {
        return _farmerOgrn;
    }

    @Override
    public void setFarmerOgrn(long farmerOgrn) {
        _farmerOgrn = farmerOgrn;
    }

    @Override
    public Long getFarmerRegistrationRegionId() {
        return _farmerRegistrationRegionId;
    }

    @Override
    public void setFarmerRegistrationRegionId(Long farmerRegistrationRegionId) {
        _farmerRegistrationRegionId = farmerRegistrationRegionId;
    }

    @Override
    public Date getFarmerRegistrationDate() {
        return _farmerRegistrationDate;
    }

    @Override
    public void setFarmerRegistrationDate(Date farmerRegistrationDate) {
        _farmerRegistrationDate = farmerRegistrationDate;
    }

    @Override
    public boolean getFarmerArchiveStatus() {
        return _farmerArchiveStatus;
    }

    @Override
    public boolean isFarmerArchiveStatus() {
        return _farmerArchiveStatus;
    }

    @Override
    public void setFarmerArchiveStatus(boolean farmerArchiveStatus) {
        _columnBitmask |= FARMERARCHIVESTATUS_COLUMN_BITMASK;

        if (!_setOriginalFarmerArchiveStatus) {
            _setOriginalFarmerArchiveStatus = true;

            _originalFarmerArchiveStatus = _farmerArchiveStatus;
        }

        _farmerArchiveStatus = farmerArchiveStatus;
    }

    public boolean getOriginalFarmerArchiveStatus() {
        return _originalFarmerArchiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Farmer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Farmer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Farmer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FarmerImpl farmerImpl = new FarmerImpl();

        farmerImpl.setUuid(getUuid());
        farmerImpl.setFarmerId(getFarmerId());
        farmerImpl.setFarmerName(getFarmerName());
        farmerImpl.setFarmerLegalForm(getFarmerLegalForm());
        farmerImpl.setFarmerInn(getFarmerInn());
        farmerImpl.setFarmerKpp(getFarmerKpp());
        farmerImpl.setFarmerOgrn(getFarmerOgrn());
        farmerImpl.setFarmerRegistrationRegionId(getFarmerRegistrationRegionId());
        farmerImpl.setFarmerRegistrationDate(getFarmerRegistrationDate());
        farmerImpl.setFarmerArchiveStatus(getFarmerArchiveStatus());

        farmerImpl.resetOriginalValues();

        return farmerImpl;
    }

    @Override
    public int compareTo(Farmer farmer) {
        int value = 0;

        value = getFarmerName().compareTo(farmer.getFarmerName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Farmer)) {
            return false;
        }

        Farmer farmer = (Farmer) obj;

        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FarmerModelImpl farmerModelImpl = this;

        farmerModelImpl._originalUuid = farmerModelImpl._uuid;

        farmerModelImpl._originalFarmerName = farmerModelImpl._farmerName;

        farmerModelImpl._originalFarmerArchiveStatus = farmerModelImpl._farmerArchiveStatus;

        farmerModelImpl._setOriginalFarmerArchiveStatus = false;

        farmerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Farmer> toCacheModel() {
        FarmerCacheModel farmerCacheModel = new FarmerCacheModel();

        farmerCacheModel.uuid = getUuid();

        String uuid = farmerCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            farmerCacheModel.uuid = null;
        }

        farmerCacheModel.farmerId = getFarmerId();

        farmerCacheModel.farmerName = getFarmerName();

        String farmerName = farmerCacheModel.farmerName;

        if ((farmerName != null) && (farmerName.length() == 0)) {
            farmerCacheModel.farmerName = null;
        }

        farmerCacheModel.farmerLegalForm = getFarmerLegalForm();

        String farmerLegalForm = farmerCacheModel.farmerLegalForm;

        if ((farmerLegalForm != null) && (farmerLegalForm.length() == 0)) {
            farmerCacheModel.farmerLegalForm = null;
        }

        farmerCacheModel.farmerInn = getFarmerInn();

        farmerCacheModel.farmerKpp = getFarmerKpp();

        farmerCacheModel.farmerOgrn = getFarmerOgrn();

        farmerCacheModel.farmerRegistrationRegionId = getFarmerRegistrationRegionId();

        Date farmerRegistrationDate = getFarmerRegistrationDate();

        if (farmerRegistrationDate != null) {
            farmerCacheModel.farmerRegistrationDate = farmerRegistrationDate.getTime();
        } else {
            farmerCacheModel.farmerRegistrationDate = Long.MIN_VALUE;
        }

        farmerCacheModel.farmerArchiveStatus = getFarmerArchiveStatus();

        return farmerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", farmerId=");
        sb.append(getFarmerId());
        sb.append(", farmerName=");
        sb.append(getFarmerName());
        sb.append(", farmerLegalForm=");
        sb.append(getFarmerLegalForm());
        sb.append(", farmerInn=");
        sb.append(getFarmerInn());
        sb.append(", farmerKpp=");
        sb.append(getFarmerKpp());
        sb.append(", farmerOgrn=");
        sb.append(getFarmerOgrn());
        sb.append(", farmerRegistrationRegionId=");
        sb.append(getFarmerRegistrationRegionId());
        sb.append(", farmerRegistrationDate=");
        sb.append(getFarmerRegistrationDate());
        sb.append(", farmerArchiveStatus=");
        sb.append(getFarmerArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("ru.kotikov.model.Farmer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerId</column-name><column-value><![CDATA[");
        sb.append(getFarmerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerName</column-name><column-value><![CDATA[");
        sb.append(getFarmerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerLegalForm</column-name><column-value><![CDATA[");
        sb.append(getFarmerLegalForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerInn</column-name><column-value><![CDATA[");
        sb.append(getFarmerInn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerKpp</column-name><column-value><![CDATA[");
        sb.append(getFarmerKpp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerOgrn</column-name><column-value><![CDATA[");
        sb.append(getFarmerOgrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerRegistrationRegionId</column-name><column-value><![CDATA[");
        sb.append(getFarmerRegistrationRegionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerRegistrationDate</column-name><column-value><![CDATA[");
        sb.append(getFarmerRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerArchiveStatus</column-name><column-value><![CDATA[");
        sb.append(getFarmerArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
