package ru.kotikov.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.kotikov.model.Region;
import ru.kotikov.model.RegionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Region service. Represents a row in the &quot;entity_Region&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.kotikov.model.RegionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegionImpl}.
 * </p>
 *
 * @author Kirill_Kotikov
 * @see RegionImpl
 * @see ru.kotikov.model.Region
 * @see ru.kotikov.model.RegionModel
 * @generated
 */
public class RegionModelImpl extends BaseModelImpl<Region>
    implements RegionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a region model instance should use the {@link ru.kotikov.model.Region} interface instead.
     */
    public static final String TABLE_NAME = "entity_Region";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "region_id", Types.BIGINT },
            { "region_name", Types.VARCHAR },
            { "region_code", Types.BIGINT },
            { "region_archive_status", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table entity_Region (uuid_ VARCHAR(75) null,region_id LONG not null primary key,region_name VARCHAR(75) null,region_code LONG,region_archive_status BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table entity_Region";
    public static final String ORDER_BY_JPQL = " ORDER BY region.regionName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY entity_Region.region_name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.kotikov.model.Region"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.kotikov.model.Region"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.kotikov.model.Region"),
            true);
    public static long REGIONARCHIVESTATUS_COLUMN_BITMASK = 1L;
    public static long REGIONNAME_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static final String MAPPING_TABLE_ENTITY_REGIONS_FARMERS_NAME = "entity_Regions_Farmers";
    public static final Object[][] MAPPING_TABLE_ENTITY_REGIONS_FARMERS_COLUMNS = {
            { "farmer_id", Types.BIGINT },
            { "region_id", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_ENTITY_REGIONS_FARMERS_SQL_CREATE = "create table entity_Regions_Farmers (farmer_id LONG not null,region_id LONG not null,primary key (farmer_id, region_id))";
    public static final boolean FINDER_CACHE_ENABLED_ENTITY_REGIONS_FARMERS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.entity_Regions_Farmers"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.kotikov.model.Region"));
    private static ClassLoader _classLoader = Region.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Region.class };
    private String _uuid;
    private String _originalUuid;
    private long _regionId;
    private String _regionName;
    private String _originalRegionName;
    private long _regionCode;
    private boolean _regionArchiveStatus;
    private boolean _originalRegionArchiveStatus;
    private boolean _setOriginalRegionArchiveStatus;
    private long _columnBitmask;
    private Region _escapedModel;

    public RegionModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _regionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRegionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _regionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Region.class;
    }

    @Override
    public String getModelClassName() {
        return Region.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("regionId", getRegionId());
        attributes.put("regionName", getRegionName());
        attributes.put("regionCode", getRegionCode());
        attributes.put("regionArchiveStatus", getRegionArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long regionId = (Long) attributes.get("regionId");

        if (regionId != null) {
            setRegionId(regionId);
        }

        String regionName = (String) attributes.get("regionName");

        if (regionName != null) {
            setRegionName(regionName);
        }

        Long regionCode = (Long) attributes.get("regionCode");

        if (regionCode != null) {
            setRegionCode(regionCode);
        }

        Boolean regionArchiveStatus = (Boolean) attributes.get(
                "regionArchiveStatus");

        if (regionArchiveStatus != null) {
            setRegionArchiveStatus(regionArchiveStatus);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getRegionId() {
        return _regionId;
    }

    @Override
    public void setRegionId(long regionId) {
        _regionId = regionId;
    }

    @Override
    public String getRegionName() {
        if (_regionName == null) {
            return StringPool.BLANK;
        } else {
            return _regionName;
        }
    }

    @Override
    public void setRegionName(String regionName) {
        _columnBitmask = -1L;

        if (_originalRegionName == null) {
            _originalRegionName = _regionName;
        }

        _regionName = regionName;
    }

    public String getOriginalRegionName() {
        return GetterUtil.getString(_originalRegionName);
    }

    @Override
    public long getRegionCode() {
        return _regionCode;
    }

    @Override
    public void setRegionCode(long regionCode) {
        _regionCode = regionCode;
    }

    @Override
    public boolean getRegionArchiveStatus() {
        return _regionArchiveStatus;
    }

    @Override
    public boolean isRegionArchiveStatus() {
        return _regionArchiveStatus;
    }

    @Override
    public void setRegionArchiveStatus(boolean regionArchiveStatus) {
        _columnBitmask |= REGIONARCHIVESTATUS_COLUMN_BITMASK;

        if (!_setOriginalRegionArchiveStatus) {
            _setOriginalRegionArchiveStatus = true;

            _originalRegionArchiveStatus = _regionArchiveStatus;
        }

        _regionArchiveStatus = regionArchiveStatus;
    }

    public boolean getOriginalRegionArchiveStatus() {
        return _originalRegionArchiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Region.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Region toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Region) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RegionImpl regionImpl = new RegionImpl();

        regionImpl.setUuid(getUuid());
        regionImpl.setRegionId(getRegionId());
        regionImpl.setRegionName(getRegionName());
        regionImpl.setRegionCode(getRegionCode());
        regionImpl.setRegionArchiveStatus(getRegionArchiveStatus());

        regionImpl.resetOriginalValues();

        return regionImpl;
    }

    @Override
    public int compareTo(Region region) {
        int value = 0;

        value = getRegionName().compareTo(region.getRegionName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Region)) {
            return false;
        }

        Region region = (Region) obj;

        long primaryKey = region.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RegionModelImpl regionModelImpl = this;

        regionModelImpl._originalUuid = regionModelImpl._uuid;

        regionModelImpl._originalRegionName = regionModelImpl._regionName;

        regionModelImpl._originalRegionArchiveStatus = regionModelImpl._regionArchiveStatus;

        regionModelImpl._setOriginalRegionArchiveStatus = false;

        regionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Region> toCacheModel() {
        RegionCacheModel regionCacheModel = new RegionCacheModel();

        regionCacheModel.uuid = getUuid();

        String uuid = regionCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            regionCacheModel.uuid = null;
        }

        regionCacheModel.regionId = getRegionId();

        regionCacheModel.regionName = getRegionName();

        String regionName = regionCacheModel.regionName;

        if ((regionName != null) && (regionName.length() == 0)) {
            regionCacheModel.regionName = null;
        }

        regionCacheModel.regionCode = getRegionCode();

        regionCacheModel.regionArchiveStatus = getRegionArchiveStatus();

        return regionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", regionId=");
        sb.append(getRegionId());
        sb.append(", regionName=");
        sb.append(getRegionName());
        sb.append(", regionCode=");
        sb.append(getRegionCode());
        sb.append(", regionArchiveStatus=");
        sb.append(getRegionArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("ru.kotikov.model.Region");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionId</column-name><column-value><![CDATA[");
        sb.append(getRegionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionName</column-name><column-value><![CDATA[");
        sb.append(getRegionName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionCode</column-name><column-value><![CDATA[");
        sb.append(getRegionCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionArchiveStatus</column-name><column-value><![CDATA[");
        sb.append(getRegionArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
